{"version":3,"file":"bundle1.js","sources":["webpack:///webpack/bootstrap","webpack:///./js/logs.js","webpack:///./js/main.js","webpack:///./js/notification.js","webpack:///./js/settings.js","webpack:///./js/timer.js"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"./assets/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./js/main.js\");\n","import { calcTime } from \"./timer.js\";\n\nconst logTable = document.querySelector(\"tbody\");\nlet logs = [];\n\nexport const showLogs = () => {\n  document.querySelector(\".popup\").classList.toggle(\"hidden\");\n};\n\nexport const clearLogs = () => {\n  logTable.innerHTML = \"\";\n};\n\nexport const createLogEntry = (elapsedTime, status, workCycle, timeMap) => {\n  const logName =\n    status === \"work\" ? `${status}_${workCycle + 1}` : `${status}`;\n  const logTime = elapsedTime ? elapsedTime : timeMap.get(status);\n  const { hours, minutes, seconds } = calcTime(logTime);\n  const editedTime =\n    logTime >= 3600\n      ? `${hours} : ${minutes} : ${seconds}`\n      : `${minutes} : ${seconds}`;\n  const logDate = new Date().toLocaleDateString();\n  const logEntry = { logName, editedTime, logDate };\n  logs.push(logEntry);\n  addLogEntry(logEntry);\n};\n\nconst addLogEntry = (logEntry) => {\n  const tr = logTable.insertRow();\n  for (const logData in logEntry) {\n    const td = document.createElement(\"td\");\n    const value = document.createTextNode(logEntry[logData]);\n    td.appendChild(value);\n    tr.appendChild(td);\n  }\n};\n","import { calcTime, updateTime } from \"./timer.js\";\nimport { initNotification, createNotification } from \"./notification.js\";\nimport { showLogs, clearLogs, createLogEntry } from \"./logs.js\";\nimport {\n  initSettings,\n  showSettings,\n  setDefaultSettings,\n  saveSettings,\n  loadSettings,\n} from \"./settings.js\";\n\nconst statusString = document.querySelector(\"#status\");\nconst selectButtons = document.querySelectorAll(\".btn-select\");\nconst [workBtn, breakBtn, longBreakBtn] = selectButtons;\n\nconst regularButtons = document.querySelectorAll(\"button:not(.btn-select)\");\nconst [\n  startBtn,\n  finishBtn,\n  resetBtn,\n  saveBtn,\n  defaultBtn,\n  clearLogBtn,\n] = regularButtons;\n\nconst showLog = document.querySelector(\"#showLog\");\nconst closeLog = document.querySelector(\".close-btn\");\nconst settingsToggle = document.querySelector(\"#settingsToggle\");\n\nlet { workTime, breakTime, longBreakTime, autoResume } = initSettings();\n\nlet status = \"work\";\nlet timerActive = false;\nlet activeTime = workTime;\nlet workCycle = 0;\n\nconst timeMap = new Map();\nconst refreshTimeMap = () => {\n  timeMap.set(\"work\", workTime);\n  timeMap.set(\"break\", breakTime);\n  timeMap.set(\"long break\", longBreakTime);\n};\nrefreshTimeMap();\n\ninitNotification();\n\nconst changeStatusStylingByBtn = (sessionStatus, event) => {\n  if (status === sessionStatus) {\n    return;\n  }\n  const activeBtn = document.querySelector(\".selected\");\n  activeBtn.classList.toggle(\"selected\");\n  event.target.classList.toggle(\"selected\");\n  setStatus(sessionStatus);\n  resetTimer();\n};\n\nconst changeStatusStyling = (newStatus) => {\n  const activeBtn = document.querySelector(\".selected\");\n  activeBtn.classList.toggle(\"selected\");\n  switch (newStatus) {\n    case \"work\":\n      workBtn.classList.toggle(\"selected\");\n      break;\n    case \"break\":\n      breakBtn.classList.toggle(\"selected\");\n      break;\n    case \"long break\":\n      longBreakBtn.classList.toggle(\"selected\");\n      break;\n  }\n  setStatus(newStatus);\n};\n\nconst setStatus = (sessionStatus) => {\n  status = sessionStatus;\n  statusString.textContent = statusToString();\n};\n\nconst statusToString = () => {\n  return `${status === \"work\" ? `Session #${workCycle + 1}` : \"Resting...\"}`;\n};\n\nupdateTime(calcTime(activeTime));\nstatusString.textContent = statusToString();\nsetInterval(() => {\n  if (timerActive) {\n    activeTime--;\n    if (activeTime < 0) {\n      if (!autoResume) {\n        resetTimer();\n      } else {\n        finishCycle();\n      }\n    }\n    updateTime(calcTime(activeTime));\n  }\n}, 1000);\n\nconst finishCycle = () => {\n  if (status === \"work\") {\n    createLogEntry(\n      timeMap.get(status) - (activeTime + 1),\n      status,\n      workCycle,\n      timeMap\n    );\n    workCycle++;\n    createNotification(status, workCycle);\n    if (workCycle >= 4) {\n      workCycle = 0;\n      changeStatusStyling(\"long break\");\n      activeTime = longBreakTime;\n    } else {\n      changeStatusStyling(\"break\");\n      activeTime = breakTime;\n    }\n  } else {\n    createNotification(status, workCycle);\n    createLogEntry(\n      timeMap.get(status) - (activeTime + 1),\n      status,\n      workCycle,\n      timeMap\n    );\n    changeStatusStyling(\"work\");\n    activeTime = workTime;\n  }\n};\n\nconst resetTimer = () => {\n  if (activeTime < timeMap.get(status)) {\n    createLogEntry(\n      timeMap.get(status) - (activeTime + 1),\n      status,\n      workCycle,\n      timeMap\n    );\n  }\n  activeTime = timeMap.get(status);\n  startBtn.textContent = \"Start\";\n  if (timerActive) {\n    startBtn.classList.toggle(\"active\");\n    startBtn.classList.toggle(\"paused\");\n    timerActive = false;\n  }\n  workCycle = 0;\n  setStatus(status);\n  updateTime(calcTime(activeTime));\n};\n\nconst applySettings = () => {\n  saveSettings();\n  const values = loadSettings();\n  if (values) {\n    ({ workTime, breakTime, longBreakTime, autoResume } = values);\n    refreshTimeMap();\n    resetTimer();\n  }\n};\n\nstartBtn.addEventListener(\"click\", () => {\n  timerActive = !timerActive;\n  startBtn.textContent = timerActive ? \"Pause\" : \"Start\";\n  startBtn.classList.toggle(\"active\");\n  startBtn.classList.toggle(\"paused\");\n});\n\nworkBtn.addEventListener(\"click\", changeStatusStylingByBtn.bind(this, \"work\"));\nbreakBtn.addEventListener(\n  \"click\",\n  changeStatusStylingByBtn.bind(this, \"break\")\n);\nlongBreakBtn.addEventListener(\n  \"click\",\n  changeStatusStylingByBtn.bind(this, \"long break\")\n);\n\nresetBtn.addEventListener(\"click\", resetTimer);\ndefaultBtn.addEventListener(\"click\", () => {\n  setDefaultSettings();\n  applySettings();\n});\nsaveBtn.addEventListener(\"click\", applySettings);\nfinishBtn.addEventListener(\"click\", () => (activeTime = 2));\nclearLogBtn.addEventListener(\"click\", clearLogs);\nconst toggleLogs = (e) => {\n  e.preventDefault();\n  showLogs();\n};\nshowLog.addEventListener(\"click\", (e) => toggleLogs(e));\ncloseLog.addEventListener(\"click\", (e) => toggleLogs(e));\nsettingsToggle.addEventListener(\"click\", (e) => {\n  e.preventDefault();\n  showSettings();\n});\n","let notificatonStatus = Notification.permission === \"granted\";\nexport const initNotification = () => {\n  if (!window.Notification) {\n    console.log(\"Browser does not support notifications.\");\n  } else {\n    if (!notificatonStatus) {\n      Notification.requestPermission()\n        .then((permission) => {\n          notificatonStatus = permission === \"granted\";\n        })\n        .catch((err) => {\n          notificatonStatus = false;\n          console.error(err);\n        });\n    }\n  }\n};\n\nexport const createNotification = (status, workCycle) => {\n  if (notificatonStatus) {\n    const body =\n      status === \"work\"\n        ? `Pomodoro session ${workCycle} is finished`\n        : \"Break is over\";\n    return new Notification(\"Pomodoro Timer\", {\n      body,\n      icon: \"../assets/alarm.png\",\n    });\n  }\n};\n","const inputs = document.querySelectorAll(\"input\");\nconst [\n  pomodoroTimeInput,\n  breakTimeInput,\n  longBreakTimeInput,\n  autoResumeBox,\n] = inputs;\nconst settingsDiv = document.querySelector(\"#settings\");\n\nconst defaultWorkTime = 25 * 60;\nconst defaultBreakTime = 5 * 60;\nconst defaultLongBreakTime = 10 * 60;\n\nexport const initSettings = () => {\n  const settings = JSON.parse(localStorage.getItem(\"settings\"));\n  pomodoroTimeInput.value = settings ? settings.work : defaultWorkTime / 60;\n  breakTimeInput.value = settings ? settings.break : defaultBreakTime / 60;\n  longBreakTimeInput.value = settings\n    ? settings.long\n    : defaultLongBreakTime / 60;\n  autoResumeBox.checked = settings ? settings.resume : true;\n  return {\n    workTime: pomodoroTimeInput.value * 60,\n    breakTime: breakTimeInput.value * 60,\n    longBreakTime: longBreakTimeInput.value * 60,\n    autoResume: autoResumeBox.checked,\n  };\n};\n\nexport const showSettings = () => {\n  settingsDiv.classList.toggle(\"hidden\");\n};\n\nexport const setDefaultSettings = () => {\n  pomodoroTimeInput.value = defaultWorkTime / 60;\n  breakTimeInput.value = defaultBreakTime / 60;\n  longBreakTimeInput.value = defaultLongBreakTime / 60;\n  autoResumeBox.value = true;\n};\n\nexport const saveSettings = () => {\n  let workV = pomodoroTimeInput.value;\n  let breakV = breakTimeInput.value;\n  let lbreakV = longBreakTimeInput.value;\n  if (workV <= 0 || breakV <= 0 || lbreakV <= 0) {\n    alert(\"Please use numbers higher than 0\");\n  } else {\n    localStorage.setItem(\n      \"settings\",\n      JSON.stringify({\n        work: workV,\n        break: breakV,\n        long: lbreakV,\n        resume: autoResumeBox.checked,\n      })\n    );\n  }\n};\n\nexport const loadSettings = () => {\n  const settings = JSON.parse(localStorage.getItem(\"settings\"));\n  return {\n    workTime: settings.work * 60,\n    breakTime: settings.break * 60,\n    longBreakTime: settings.long * 60,\n    autoResume: settings.resume,\n  };\n};\n","const timerText = document.querySelector(\"#timer\");\n\nexport const calcTime = (time) => {\n  const hours = Math.floor(time / 3600);\n  const minutes = Math.floor((time % 3600) / 60);\n  const seconds = time % 60;\n  return {\n    hours: formatTime(hours),\n    minutes: formatTime(minutes),\n    seconds: formatTime(seconds),\n  };\n};\n\nexport const updateTime = ({ hours, minutes, seconds }) => {\n  timerText.textContent = `${hours}: ${minutes} : ${seconds}`;\n};\n\nconst formatTime = (time) => {\n  if (time < 1) {\n    return \"00\";\n  }\n  if (time < 10) {\n    return `0${time}`;\n  }\n  return time;\n};\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACpnMA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC7BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}